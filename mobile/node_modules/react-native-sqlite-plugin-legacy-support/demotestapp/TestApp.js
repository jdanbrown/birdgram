/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import { createElement as h, Component } from 'react';

import { Platform, StyleSheet, Text, View } from 'react-native';

import sqlitePlugin from 'react-native-sqlite-plugin-legacy-support';

/** @jsx h */

export default class TestApp extends Component<{}> {
  state = {
    status: 'starting',
    message: '--',
    estatus: '???',
    dbstatus: '???',
    stringTestResult: '???',
    sqliteVersion: '????',
    ststatus: '???',
    testErrorMessage: '--'
  };
  componentDidMount() {
    this.sampleMethodTest();
  }
  sampleMethodTest() {
    // FUTURE TBD sampleMethod & sampleMethodTest may go away
    sqlitePlugin.sampleMethod('Testing', 123, (message) => {
      this.setState({
        ...this.state,
        status: 'sample callback received',
        message
      });
      this.sqlitePluginTest();
    });
  }
  sqlitePluginTest() {
    sqlitePlugin.echoTest(() => {
      this.setState({
        ...this.state,
        estatus: 'echo ok'
      });
      sqlitePlugin.openDatabase({name:'demo-test.db', location: 'default'}, (db) => {
        this.setState({
          ...this.state,
          dbstatus: 'open db ok'
        });
        db.executeSql('SELECT UPPER("Some ASCII text") as upperText', [], (rs) => {
          this.setState({
            ...this.state,
            stringTestResult: 'rows count: ' + rs.rows.length + ' upperText: ' + rs.rows.item(0).upperText
          });
          db.executeSql('SELECT SQLITE_VERSION() AS myResult', [], (rs2) => {
            this.setState({
              ...this.state,
              sqliteVersion: rs2.rows.item(0).myResult
            });
            sqlitePlugin.selfTest(() => {
              this.setState({
                ...this.state,
                ststatus: 'self test ok'
              });
              db.executeSql('SLCT 1', [], null, (e) => {
                this.setState({
                  ...this.state,
                  testErrorMessage: e.message
                });
              });
            }, (e) => {
              this.setState({
                ...this.state,
                ststatus: 'self test error with message: ' + e.message
              });
            });
          });
        });
      }, (e) => {
        this.setState({
          ...this.state,
          status: 'open db error with message: ' + e.message
        });
      });
    });
  }
  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>☆SQLitePlugin test app☆</Text>
        <Text style={styles.instructions}>STATUS: {this.state.status}</Text>
        <Text style={styles.welcome}>☆SAMPLE MESSAGE☆</Text>
        <Text style={styles.instructions}>{this.state.message}</Text>
        <Text style={styles.instructions}>ECHO TEST STATUS: {this.state.estatus}</Text>
        <Text style={styles.instructions}>DB STATUS: {this.state.dbstatus}</Text>
        <Text style={styles.welcome}>☆STRING TEST RESULT☆</Text>
        <Text style={styles.instructions}>{this.state.stringTestResult}</Text>
        <Text style={styles.instructions}>☆SQLITE VERSION: {this.state.sqliteVersion}☆</Text>
        <Text style={styles.instructions}>SELF TEST STATUS: {this.state.ststatus}</Text>
        <Text style={styles.welcome}>☆SYNTAX ERROR MESSAGE☆</Text>
        <Text style={styles.instructions}>{this.state.testErrorMessage}</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
