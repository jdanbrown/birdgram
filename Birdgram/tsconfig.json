{
  "compilerOptions": {
    // https://www.typescriptlang.org/docs/handbook/compiler-options.html

    // Target
    //  - QUESTION How risky is it to change "target"/"lib"?
    //    - https://github.com/facebook/metro/tree/master/packages/metro-react-native-babel-preset
    //    - https://github.com/ds300/react-native-typescript-transformer
    //      - "I've had success with the following" -> es2017
    //  - Going with lib:es2017 to fix some type errors in audio_utils (from @magenta/music)
    //    - As per https://github.com/ds300/react-native-typescript-transformer#tsconfigjson-notes
    "target": "es5",                          // Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'.
    "module": "commonjs",                     // Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'.
    // "lib": ["DOM", "ES5", "ScriptHost"],   // Specify library files to be included in the compilation.
    // "lib": ["es5"],
    "lib": ["es2017"],

    // Basic Options
    // "allowJs": false,                      // Allow javascript files to be compiled.
    // "checkJs": false,                      // Report errors in .js files.
    // QUESTION "react" or "react-native"? [https://www.typescriptlang.org/docs/handbook/jsx.html]
    "jsx": "react",                           // Specify JSX code generation: 'preserve', 'react-native', or 'react'.
    // "declaration": false,                  // Generates corresponding '.d.ts' file.
    // "declarationMap": false,               // Generates a sourcemap for each corresponding '.d.ts' file.
    // "sourceMap": false,                    // Generates corresponding '.map' file.
    // "outFile": "./",                       // Concatenate and emit output to single file.
    // "outDir": "./",                        // Redirect output structure to the directory.
    // "rootDir": "./",                       // Specify the root directory of input files. Use to control the output directory structure with --outDir.
    // "composite": false,                    // Enable project compilation
    // "removeComments": false,               // Do not emit comments to output.
    "noEmit": true,                           // Do not emit outputs.
    "importHelpers": true,                    // Import emit helpers from 'tslib'.
    // "downlevelIteration": false,           // Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'.
    // "isolatedModules": false,              // Transpile each file as a separate module (similar to 'ts.transpileModule').

    // Strict Type-Checking Options
    "strict": true,                           // Enable all strict type-checking options.
    // "noImplicitAny": false,                // Raise error on expressions and declarations with an implied 'any' type.
    // "strictNullChecks": false,             // Enable strict null checks.
    // "strictFunctionTypes": false,          // Enable strict checking of function types.
    // "strictPropertyInitialization": false, // Enable strict checking of property initialization in classes.
    // "noImplicitThis": false,               // Raise error on 'this' expressions with an implied 'any' type.
    // "alwaysStrict": false,                 // Parse in strict mode and emit "use strict" for each source file.

    // Additional Checks
    // "noUnusedLocals": false,               // Report errors on unused locals.
    // "noUnusedParameters": false,           // Report errors on unused parameters.
    // "noImplicitReturns": false,            // Report error when not all code paths in function return a value.
    // "noFallthroughCasesInSwitch": false,   // Report errors for fallthrough cases in switch statement.

    // Module Resolution Options
    // "moduleResolution": "node",            // Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).
    // NOTE I tried uncommenting baseUrl once and absolute imports didn't just work...
    // "baseUrl": "./",                       // Base directory to resolve non-absolute module names.
    // "paths": {},                           // A series of entries which re-map imports to lookup locations relative to the 'baseUrl'.
    // "rootDirs": [],                        // List of root folders whose combined content represents the structure of the project at runtime.
    // "typeRoots": [],                       // List of folders to include type definitions from.
    // "types": [],                           // Type declaration files to be included in compilation.
    "allowSyntheticDefaultImports": true,     // Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
    "esModuleInterop": true                   // Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'.
    // "preserveSymlinks": false,             // Do not resolve the real path of symlinks.

    // Source Map Options
    // "sourceRoot": "",                      // Specify the location where debugger should locate TypeScript files instead of source locations.
    // "mapRoot": "",                         // Specify the location where debugger should locate map files instead of generated locations.
    // "inlineSourceMap": false,              // Emit a single file with source maps instead of having a separate file.
    // "inlineSources": false,                // Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set.

    // Experimental Options
    // "experimentalDecorators": false,       // Enables experimental support for ES7 decorators.
    // "emitDecoratorMetadata": false,        // Enables experimental support for emitting type metadata for decorators.

  }
}
