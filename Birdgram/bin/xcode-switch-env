#/bin/sh
# Can't rely on shebang line [why?]
set -eux
set -o pipefail
#
# Build script for the switch-env target in the Birdgram xcode project
# - For https://github.com/luggit/react-native-config

# Export for callees
export BIRDGRAM_DIR="$SRCROOT/.."

# Bust cache
# - Force Info.plist to be recomputed from .env (via xcode INFOPLIST_PREPROCESS, from react-native-config README)
rm -f "$CONFIGURATION_TEMP_DIR/Birdgram.build/Preprocessed-Info.plist"

# Read $SCHEME_NAME from bin/xcode-pre-actions
# - (b/c xcode exposes $SCHEME_NAME during pre-actions but not build)
source "$BIRDGRAM_DIR/.env.SCHEME_NAME"

# Build .env from $SCHEME_NAME
# - (cf. ios/bin/fastlane-env)
"$BIRDGRAM_DIR"/bin/xcode-switch-env-from-scheme

# Run BuildDotenvConfig.ruby
# - [Why did we have to do this manually?]
# - From https://github.com/luggit/react-native-config/issues/187#issuecomment-353156419
# - cf. https://github.com/ueno-llc/react-native-starter/blob/master/scripts/build-env.sh
if [ -n "$SYMROOT" ]; then
  RNC_DIR='node_modules/react-native-config/ios'

  # Ensure dirs
  mkdir -p "$SYMROOT"
  mkdir -p "$BUILD_DIR"

  # Build dotenv
  (cd "$RNC_DIR" && ReactNativeConfig/BuildDotenvConfig.ruby)

  # QUESTION Is "  " i/o " " in the .h a problem?
  # - https://github.com/luggit/react-native-config/issues/294
  # - Using -traditional seems to avoid the issue for Info.plist preprocessing
  # - But are there any other downstream consumers where this is a problem?
  # - Complexity: running this perl replace on the $BUILD_DIR file does fix the $RNC_DIR file, but the $BUILD_DIR file
  #   somehow gets reverted to two spaces i/o one [why?]
  # perl -pi -e 's/  / /g' "$BUILD_DIR/GeneratedInfoPlistDotEnv.h"

  # Copy generated dotenv files to node_modules directory
  cp "$BUILD_DIR/GeneratedInfoPlistDotEnv.h" "$RNC_DIR/ReactNativeConfig/GeneratedInfoPlistDotEnv.h"
  cp "$SYMROOT/GeneratedDotEnv.m"            "$RNC_DIR/ReactNativeConfig/GeneratedDotEnv.m"

fi

# HACK Generate LaunchScreen.xib from LaunchScreen.template.xib
# - So we can do __RN_CONFIG_* var substitution, like with Info.plist
cat "$BIRDGRAM_DIR"/ios/Birdgram/Base.lproj/LaunchScreen.template.xib \
  | perl -pe "$(cat "$INFOPLIST_PREFIX_HEADER" | perl -pe 's/^#define ([^ ]+)\s+(.*)$/s#\\b\1\\b#\2#g;/g')" \
  >"$BIRDGRAM_DIR"/ios/Birdgram/Base.lproj/LaunchScreen.xib

# HACK HACK Fix cocoapods MACH_O_TYPE: "Static Library" -> "Dynamic Library"
# - Else error at the end of app publish (after the slooow Archive step)
#   - "Found an unexpected Mach-O header code: 0x72613c21"
#   - https://www.google.com/search?q=pods+"Found+an+unexpected+Mach-O+header+code%3A+0x72613c21"
# - Problem: Modifying project.pbxproj during the build pre-action causes the build to cancel
# - Workaround: Don't modify project.pbxproj unless its contents are changing (i.e. on scheme switch). This will cause
#   an (annoying) "Build cancelled" on the first build after switching schemes, but it should work normally after that.
# - TODO(slow_app_launch): Investigate whether dynamic i/o static pods libs meaningfully slows down app launch
#   - https://blog.automatic.com/how-we-cut-our-ios-apps-launch-time-in-half-with-this-one-cool-trick-7aca2011e2ea
(
  tmp="`mktemp`"
  pbxproj="$SRCROOT/Pods/Pods.xcodeproj/project.pbxproj"
  perl -pe >"$tmp" <"$pbxproj" \
    's/MACH_O_TYPE = staticlib;/MACH_O_TYPE = mh_dylib;/g'
  if ! diff "$tmp" "$pbxproj" >/dev/null; then
    cp -vf "$tmp" "$pbxproj"
  fi
)

# vi: ft=sh
