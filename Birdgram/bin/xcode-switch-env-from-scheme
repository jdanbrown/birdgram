#!/bin/bash -eu
set -o pipefail
#
# Generate .env from $SCHEME_NAME
# - Called from bin/xcode-switch-env (for https://github.com/luggit/react-native-config)
# - Called from ios/bin/fastlane-env

die() { echo "Error: $*" >&2; exit 1; }

# Log env for debugging
# env # XXX Too noisy for ios/bin/fastlane-env

# e.g. "Birdgram US" -> "Birdgram", "US"
# - TODO Dedupe with .env.shared
export SCHEME_PREFIX="$(echo "$SCHEME_NAME" | cut -d' ' -f1)"
export SCHEME_SUFFIX="$(echo "$SCHEME_NAME" | cut -d' ' -f2-)"

# Generate .env <- .env.shared + .env.$SCHEME_SUFFIX
# - TODO Dedupe with ios/bin/fastlane-env
env_shared_path="$BIRDGRAM_DIR/.env.shared";         if [ ! -e "$env_shared_path" ]; then die "File not found: $env_shared_path"; fi
env_scheme_path="$BIRDGRAM_DIR/.env.$SCHEME_SUFFIX"; if [ ! -e "$env_scheme_path" ]; then die "File not found: $env_scheme_path"; fi
env_path="$BIRDGRAM_DIR/.env"
(
  set -x
  echo "# From file[`basename "$env_shared_path"`]" | sed 's/^/++ /'
  source "$env_shared_path"
  echo                                              | sed 's/^/++ /'
  echo "# From file[`basename "$env_scheme_path"`]" | sed 's/^/++ /'
  source "$env_scheme_path"
  echo                                              | sed 's/^/++ /'
  echo "# All env vars available at build time:"    | sed 's/^/++ /'
  env | sort                                        | sed 's/^/++ # /'
# HACK _Very_ brittle ('++ foo=bar')
# - What's a simpler way to allow .env.* files to have vars that depend on other vars in the same file?
) 2>&1 \
  | ack '^\++ ([A-Z]\w*=.*|#.*|\s*)$' --output='$1' \
  | ack -v '^export ' \
  | perl -pe 's/^([A-Z].*)$/export \1/' \
  >"$env_path"

# HACK Manually edit PRODUCT_BUNDLE_IDENTIFIER in project.pbxproj
# - I can't otherwise find a way to feed it variables (like Info.plist)
# - This creates a problem: modifying project.pbxproj during the build pre-action causes the build to cancel itself
# - Hacky solution: only modify project.pbxproj when its contents need to change (e.g. on scheme switch). This will
#   cause an (annoying) "Build cancelled" on the first build after switching schemes, and then should work normally
#   until you switch schemes again.
# - Previously, I left PRODUCT_BUNDLE_IDENTIFIER unset (in project.pbxproj) and used CFBundleIdentifier (in Info.plist)
#   because I could control it using react-native-config vars (via Info.plist preprocessing), but this approach fell
#   apart # when I tried publishing the app, because the "Validate App" step (after the slow Archive build step) failed
#   on the # missing PRODUCT_BUNDLE_IDENTIFIER
(
  source "$env_path"
  tmp="`mktemp`"
  pbxproj="$BIRDGRAM_DIR/ios/Birdgram.xcodeproj/project.pbxproj"
  perl -pe >"$tmp" <"$pbxproj" '
    s/(\bPRODUCT_BUNDLE_IDENTIFIER\s*=\s*"app\.birdgram\.)(birdgram-[^."]+)([^"]*";)/\1'"$APP_BUNDLE_ID_NAME"'\3/g;
  '
  if ! diff "$tmp" "$pbxproj" >/dev/null; then
    cp -f "$tmp" "$pbxproj"
  fi
)

# HACK Manually edit PROVISIONING_PROFILE_SPECIFIER in project.pbxproj
# - (See comments in Fastfile)
(
  source "$env_path"
  tmp="`mktemp`"
  pbxproj="$BIRDGRAM_DIR/ios/Birdgram.xcodeproj/project.pbxproj"
  perl -pe >"$tmp" <"$pbxproj" '
    s {
      (\bPROVISIONING_PROFILE_SPECIFIER\s*=\s*"match)\s+
      (Development|AppStore)\s+
      (app\.birdgram\.)
      (birdgram-[^."]+)
      ([^"]*";)
    }
    {\1 '"$PROVISIONING_PROFILE_TYPE"' \3'"$APP_BUNDLE_ID_NAME"'\5}xg;
  '
  if ! diff "$tmp" "$pbxproj" >/dev/null; then
    cp -f "$tmp" "$pbxproj"
  fi
)
