# Related
# - .env.*
# - ios/bin/fastlane-env
# - ios/Appfile
# - ios/Matchfile
#
# Docs
# - https://docs.fastlane.tools
# - https://docs.fastlane.tools/actions
# - https://docs.fastlane.tools/actions/build_app/
# - https://docs.fastlane.tools/plugins/available-plugins

# HOWTO Add a new env
# - For fastlane/xcode
#   - Create a new bundle id: https://developer.apple.com/account/ios/identifier/bundle
#   - Create an .env.* file (copy an existing one)
#   - Add a case to PILOT_BETA_APP_DESCRIPTION (in Fastfile)
# - For xcode only
#   - Create a new scheme: duplicate any existing Birdgram scheme and rename it (that's all)

# TODO Isolate the built .ipa files ($APP_NAME.$CONFIGURATION.ipa)
# - build_app
#   - GYM_OUTPUT_DIRECTORY='fastlane/build'
#   - GYM_OUTPUT_NAME="$APP_NAME.$CONFIGURATION.ipa"
# - upload_to_testflight
#   - PILOT_IPA="$GYM_OUTPUT_DIRECTORY/$GYM_OUTPUT_NAME"

# TODO Automate a full rollout [once we get tired of doing them manually]
# lane :'test-flight-all' do |args|
#   sh 'fastlane-env CA100 test-flight'
#   sh 'fastlane-env CA3500 test-flight'
#   sh 'fastlane-env US test-flight'
#   sh 'fastlane-env CR test-flight'
# end

# TODO Upload to App Store (deliver)
# - [defer] See how long we can stretch out public TestFlight builds, to defer the full-on nitpicky app store review process
# - https://docs.fastlane.tools/getting-started/ios/appstore-deployment/ -- read for overview
# - https://docs.fastlane.tools/actions/upload_to_app_store/             -- then follow this one
# desc 'Build and upload to App Store'
# lane :'app-store' do
#   ...
#   upload_to_app_store(...)
# end

# XXX install_on_device
# - (!) Not well paved, lots of issues to work through, slow iteration loop...
# - Workaround: Keep using xcode
# lane :run_device do
#   register_devices(devices: DEVICES)
#   sync_code_signing(type: 'development', force_for_new_devices: true)
#   # Docs: https://docs.fastlane.tools/actions/build_app/
#   build_app(
#     configuration: 'Debug',
#     export_method: 'development', # Causing problems?
#   )
#   install_on_device
# end

# Keep in sync with: https://developer.apple.com/account/ios/device/
DEVICES = {
  "Dan's iPhone"            => 'd6a4ce95276312c5980b0042ceae18dc1bece052',
  "Mu"                      => '4e81b428602568b71c73ecf1355ad812d5bc0701',
  "Sarah's iPhone"          => 'fc373b3f40bd41bb7ebe4e87f2fca2bd4a5a2944',
  "Whitney Grover's iPhone" => 'd510eb4c05e7e6c89eaad2dc7cce5124f40bc4a7',
}

## .env.* (via bin/fastlane-env)

# APP_IDENTIFIER
ENV['APP_IDENTIFIER']          = ENV['APP_BUNDLE_ID']
ENV['FASTLANE_APP_IDENTIFIER'] = ENV['APP_BUNDLE_ID']
ENV['PRODUCE_APP_IDENTIFIER']  = ENV['APP_BUNDLE_ID']
ENV['MATCH_APP_IDENTIFIER']    = ENV['APP_BUNDLE_ID']
ENV['PILOT_APP_IDENTIFIER']    = ENV['APP_BUNDLE_ID']

# APP_NAME
ENV['PRODUCE_APP_NAME'] = ENV['APP_NAME']

# KEYCHAIN_*
ENV['KEYCHAIN_NAME']           = 'fastlane'
ENV['KEYCHAIN_PASSWORD']       = 'fastlane'
ENV['MATCH_KEYCHAIN_NAME']     = ENV['KEYCHAIN_NAME']
ENV['MATCH_KEYCHAIN_PASSWORD'] = ENV['KEYCHAIN_PASSWORD']

# misc.
ENV['GYM_SCHEME']    = ENV['SCHEME_NAME']
ENV['GYM_WORKSPACE'] = ENV['WORKSPACE']

# Automatically populate some of the TestFlight fields
# - https://docs.fastlane.tools/actions/upload_to_testflight/
# - Still have to populate some of them manually [https://github.com/fastlane/fastlane/issues/9242]
#   - Marketing URL: https://birdgram.app
#   - Privacy Policy URL: https://privacypolicies.com/privacy/view/d041c35c7ed5aea0eef24e58a360020a
#   - Beta App Review Information: ...
ENV['PILOT_BETA_APP_FEEDBACK']    = 'birdgram.app@gmail.com'
ENV['PILOT_BETA_APP_DESCRIPTION'] = [
  <<~EOF ,
    Birdgram is a novel way to learn about and understand bird song. It lets the user record a bird
    song in the wild and then searches a database of known bird recordings for possible matches. All
    recordings and search results are presented visually as spectrograms, which are standard tools
    that scientists and audio professionals use to quickly "see" the content of an audio signal, but
    are critically underutilized within the birding-by-ear community.
  EOF
  <<~EOF ,
    Key workflows within the app:
    - Record a sound and search for similar recordings to try to figure out what species made it
    - Given any search result, browse the known recordings for its species
    - Given any search result, search for similar recordings (as if the user had just recorded it)
  EOF
  {
    'CA100' => <<~EOF ,
      This "Birdgram CA100" variant of the app is a limited version that only contains 100 known
      recordings for birds found in California, which I'm using to learn about the TestFlight
      submission process. I plan to follow up with a "Birdgram US" variant that has ~45k known
      recordings for birds found throughout the US.
    EOF
    'CA3500' => <<~EOF ,
      This "Birdgram CA3500" variant of the app is a limited version that only contains 3500 known
      recordings for birds found in California, which I'm using to learn about the TestFlight
      submission process. I plan to follow up with a "Birdgram US" variant that has ~45k known
      recordings for birds found throughout the US.
    EOF
    'US' => <<~EOF ,
      This is the US version with ~45k known recordings of birds found in the US.
    EOF
    'CR' => <<~EOF ,
      This is the Costa Rica version with ~45k known recordings of birds found in Costa Rica.
    EOF
  }.fetch(ENV['APP_REGION']),
].join("\n")

##

default_platform(:ios)

before_all do

  # Fail if the user didn't run us via `bundle exec fastlane`
  ensure_bundle_exec

  # Ensure our 'fastlane' keychain exists
  # - Don't use the default 'login.keychain' keychain, else we'd have to store the user's password somewhere
  if File.exists?("#{ENV['HOME']}/Library/Keychains/#{ENV['KEYCHAIN_NAME']}-db")
    UI.message("Keychain exists: #{ENV['KEYCHAIN_NAME']}")
  else
    # NOTE The first time sync_code_signing runs on an empty keychain, it will emit some noisy red error text but still succeed
    create_keychain(
      default_keychain:   false,
      lock_when_sleeps:   true,
      lock_after_timeout: false,
    )
  end

end

platform :ios do

  desc 'Switch xcode settings to the given env (like Xcode -> switch scheme -> Build -> Target switch-env)'
  lane :switch do
    # Noop in fastlane, handled by bin/fastlane-env
  end

  desc 'Create all resources: bundle ids, apps, provisioning profiles, device registration, ...'
  lane :create do

    # 3 configs: Debug, Release, Release-AppStore
    # - 'Debug'            ~ 'match Development' ~ install locally (via xcode)
    # - 'Release'          ~ 'match Development' ~ install locally (via xcode)
    # - 'Release-AppStore' ~ 'match AppStore'    ~ upload to testflight/appstore (via fastlane)
    # - The provisioning profile for local 'Release' must be 'match Development' else you'll get the
    #   dreaded "invalid entitlements" xcode error [https://stackoverflow.com/a/28156468]
    # - And we have to split 'Release-AppStore' from 'Release' because fastlane requires bundle ids
    #   and provisioning profiles to be 1-1
    #   - https://github.com/fastlane/fastlane/blob/030ddb9/match/lib/match/generator.rb#L49-L55
    app_identifiers = {
      'Debug'            => "#{ENV['APP_IDENTIFIER']}.debug",
      'Release'          => "#{ENV['APP_IDENTIFIER']}.release",
      'Release-AppStore' => "#{ENV['APP_IDENTIFIER']}",
    }

    # Register devices
    # - Console: https://developer.apple.com/account/ios/device/
    # - Docs: https://docs.fastlane.tools/actions/register_devices/
    register_devices(devices: DEVICES)

    # Create bundle id + app (produce)
    # - Console (bundle ids): https://developer.apple.com/account/ios/identifier/bundle
    # - Console (apps): https://appstoreconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/app
    # - NOTE After the bundle/app exists, changes in the params have no effect
    app_identifiers.each do |configuration, app_identifier|
      create_app_online(
        app_identifier: app_identifier,
        skip_devcenter: false,                                 # Always create a bundle id (required for local provisioning profiles)
        skip_itc:       !configuration.end_with?('-AppStore'), # Only create an app for 'AppStore' builds
        app_version:    '0.0.0', # Real versions are managed by upload_to_testflight/upload_to_app_store
        enable_services: {
          game_center:     'on', # (On by default, and can't turn off)
          in_app_purchase: 'on', # (On by default, and can't turn off)
        },
      )
    end

    # Create provisioning profiles (match)
    # - Console: https://developer.apple.com/account/ios/profile/
    # - Docs: https://docs.fastlane.tools/actions/sync_code_signing/
    # - Run for all (type, app_identifier) pairs we use to create any provisioning profiles that don't exist
    #  - e.g. to build/run in xcode, you'll need the 'development' provisioning profile
    app_identifiers.each do |configuration, app_identifier|
      if !configuration.end_with?('-AppStore')
        sync_code_signing(app_identifier: app_identifier, type: 'development', force_for_new_devices: true)
      else
        sync_code_signing(app_identifier: app_identifier, type: 'appstore')
      end
    end

  end

  # Docs
  # - https://docs.fastlane.tools/actions/upload_to_testflight/
  # - TODO Distribute a previously uploaded binary: https://github.com/fastlane/fastlane/issues/7957
  desc 'Build and upload to TestFlight'
  lane :'test-flight' do |args|

    only = (args[:only] || '').split(',')
    no   = (args[:no]   || '').split(',')

    # Code signing (match)
    step = 'sign'; if !no.include?(step) && (only.empty? || only.include?(step))
      sync_code_signing(type: 'appstore')
    end

    # Build (gym)
    # - https://docs.fastlane.tools/actions/build_app/
    step = 'build'; if !no.include?(step) && (only.empty? || only.include?(step))
      # increment_build_number # Skip (handled by bin/xcode-switch-env-gen-app-version-build)
      build_app(
        configuration: 'Release-AppStore',
        include_symbols: true,
        include_bitcode: true,
      )
    end

    # Upload to TestFlight (pilot)
    # - https://docs.fastlane.tools/actions/upload_to_testflight/
    step = 'upload'; if !no.include?(step) && (only.empty? || only.include?(step))
      upload_to_testflight(
        skip_waiting_for_build_processing: true, # Skip else looong wait (good for CI, less good for manual)
        demo_account_required: false,
      )
    end

  end

end
