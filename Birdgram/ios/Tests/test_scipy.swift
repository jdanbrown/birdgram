// NOTE Must first import every module from Bubo's "Linked Frameworks and Libraries", else "error: Couldn't lookup symbols"
import Surge
import SigmaSwiftStatistics
import SwiftyJSON
import Yams
import Bubo

func sig(_ name: String, _ xs: [Float], limit: Int? = 7) {
  print(String(format: "%@ %3d %@", name, xs.count, show(xs.slice(to: limit), prec: 3)))
}

func mat(_ name: String, _ X: Matrix<Float>) {
  print(String(format: "%@ %@\n%@", name, String(describing: X.shape), show(X, prec: 3)))
}

//
// scipy.signal.spectrogram
//

do {

  func _spectrogram(
    _ xs: [Float],
    nperseg: Int
  ) -> scipy.signal.Spectrogram {
    return scipy.signal.spectrogram(
      xs,
      sample_rate: 22050,
      window:      "hann",
      nperseg:     nperseg,
      noverlap:    nperseg / 2,
      scaling:     "spectrum",
      mode:        "magnitude"
    )
  }

  testEqual2("scipy.signal.spectrogram doesn't crash", _spectrogram(scipy.signal.hann(0),  nperseg: 32).S.shape, (17, 0))
  testEqual2("scipy.signal.spectrogram doesn't crash", _spectrogram(scipy.signal.hann(1),  nperseg: 32).S.shape, (17, 0))
  testEqual2("scipy.signal.spectrogram doesn't crash", _spectrogram(scipy.signal.hann(31), nperseg: 32).S.shape, (17, 0))
  testEqual2("scipy.signal.spectrogram doesn't crash", _spectrogram(scipy.signal.hann(32), nperseg: 32).S.shape, (17, 1))
  testEqual2("scipy.signal.spectrogram doesn't crash", _spectrogram(scipy.signal.hann(33), nperseg: 32).S.shape, (17, 1))
  testEqual2("scipy.signal.spectrogram doesn't crash", _spectrogram(scipy.signal.hann(47), nperseg: 32).S.shape, (17, 1))
  testEqual2("scipy.signal.spectrogram doesn't crash", _spectrogram(scipy.signal.hann(48), nperseg: 32).S.shape, (17, 2))
  testEqual2("scipy.signal.spectrogram doesn't crash", _spectrogram(scipy.signal.hann(49), nperseg: 32).S.shape, (17, 2))
  testEqual2("scipy.signal.spectrogram doesn't crash", _spectrogram(scipy.signal.hann(63), nperseg: 32).S.shape, (17, 2))
  testEqual2("scipy.signal.spectrogram doesn't crash", _spectrogram(scipy.signal.hann(64), nperseg: 32).S.shape, (17, 3))

}

do {

  // Copied from .ipynb
  let params = Json.loads("""
  {"n": 128, "nperseg": 32, "x": [0.430107312417345, 0.5406103857672341, 0.07087668771457578, 0.5406394809766228, 0.7023272245107849, 0.4233888277812806, 0.4050195468248112, 0.5652538677529692, 0.8759385716178671, 0.03481580101135873, 0.4391608244140476, 0.9229344133988516, 0.5487148373073868, 0.3047979419059367, 0.4602661282277565, 0.6145727847598779, 0.38265200857781034, 0.28258835700501383, 0.4671887336237589, 0.2138601016894447, 0.6030489979707507, 0.644866792514375, 0.36220012894903475, 0.9250231833309637, 0.8549420157337225, 0.016768049052603762, 0.8680287233164319, 0.08677565304245272, 0.3583613190149486, 0.1338469745513825, 0.7013890045528491, 0.4464126893518203, 0.8595134207132278, 0.42631879717161647, 0.7043890836505035, 0.29059748348305237, 0.6869523595981453, 0.5541318671925003, 0.21578643171978784, 0.7344130831918267, 0.015378209061741366, 0.566836424242498, 0.3072933694206803, 0.36407779013466757, 0.28208791436416136, 0.31036789424353173, 0.15252374785131584, 0.10052240720524419, 0.1713725443356663, 0.4776223331938274, 0.9378895516517125, 0.7141449934275859, 0.46907764173213895, 0.9697494575744555, 0.9023762168590688, 0.23127383632102494, 0.7817127073075368, 0.45287203674067855, 0.3148349753664549, 0.4596948477724413, 0.04509356278457988, 0.8057155060678617, 0.41991024048292236, 0.30830966255900283, 0.5045384419849931, 0.6809972455742219, 0.7737414237565153, 0.11312435137779753, 0.7215901118165083, 0.3563424557677618, 0.7827335644983756, 0.7603949931009987, 0.6787351844647231, 0.018712813798241523, 0.3941947437007155, 0.7945879231060383, 0.6212192709734048, 0.9927256897596538, 0.9071550007466764, 0.03143973942162892, 0.5050155456990761, 0.20902211730655473, 0.5851472509603028, 0.1006201873467133, 0.7016210430992051, 0.9102786644993393, 0.06765180569854912, 0.9921191728916686, 0.8765821977441107, 0.3503359721475159, 0.599379827472516, 0.4057498583322767, 0.40113338335053983, 0.31587665865029757, 0.703099401659862, 0.46882924775568846, 0.6206838151894752, 0.6811426839236353, 0.12063604151999041, 0.7130833136180738, 0.736595480177042, 0.4496039217836659, 0.6607108820998061, 0.6910801745331279, 0.4034471156221051, 0.5698492665953926, 0.054589228905563836, 0.0934774425152205, 0.1294268750591342, 0.24332606770226273, 0.3614327937194778, 0.432340494790024, 0.7726719263284169, 0.4548716466818832, 0.5227482863096398, 0.4172792736032809, 0.5158392418771024, 0.012646611372272076, 0.44846561673341223, 0.22007660116031325, 0.44622820967983823, 0.9789163953932042, 0.07052874240691287, 0.497450960592664, 0.6277833739935467, 0.8077016301595865, 0.6472661928421101, 0.291658201108307], "S": [[0.01323162228233956, 0.047599488367805864, 0.01741829312100801, 0.03427356058574466, 0.0009726936698553831, 0.04808965768700561, 0.05545134575194202], [0.005679232648794718, 0.038307842343503325, 0.09525409103463188, 0.04552309440529084, 0.017564036116051385, 0.03605772637238048, 0.04951666147052277], [0.045440941433445535, 0.05508719467483023, 0.1263289654170536, 0.04613557049821952, 0.05435991938620276, 0.0482967591667039, 0.05466399314839893], [0.05559823801418298, 0.06661087692642255, 0.09222112285491021, 0.02469628940572619, 0.0933364031029592, 0.01861468069741893, 0.10570277827007872], [0.03249450700238128, 0.051876425559875185, 0.05813367940344844, 0.03580851751300409, 0.0923738232009946, 0.05163446505171799, 0.07260313692273898], [0.015146593557762914, 0.04129182415150619, 0.04437960692713564, 0.032129843675214785, 0.07927993863459167, 0.03730109086530314, 0.009327902546625596], [0.023659822869400732, 0.028809117274348567, 0.03473247534452513, 0.0564494112039153, 0.060749222877849146, 0.025928713218982918, 0.02755988324791524], [0.045037877970834896, 0.023984192465118785, 0.04235726475021104, 0.07027803468405033, 0.025954559238000274, 0.025306017899315466, 0.019220214459154738], [0.08014609097417123, 0.018814346843292425, 0.06225261583030752, 0.04948377540881789, 0.03017904511442416, 0.042877148005623596, 0.03191593224409922], [0.043429867419500154, 0.025994379658519966, 0.05981683287347817, 0.0580796153463554, 0.08464469393514086, 0.009727159795118125, 0.0140066557714778], [0.08936558660394954, 0.05777202952371631, 0.04410482312461623, 0.0570241715847074, 0.11499096002323458, 0.06619489204160345, 0.04620074459012666], [0.06100154079224629, 0.023676963362107846, 0.07179028461199521, 0.042444668015895144, 0.025238961192971966, 0.09370666854487092, 0.032084626715676204], [0.05656836359547626, 0.06904349704056907, 0.02494517891916044, 0.03787428196175738, 0.07827724177547397, 0.03843516913439369, 0.04831742641791421], [0.05384588017580713, 0.05051818465986955, 0.048767033184078545, 0.07719515958487236, 0.11448321980847463, 0.061830880072574264, 0.010300677758293826], [0.01753589644553901, 0.07626550701213675, 0.02110132675521647, 0.09801246207328743, 0.07357482710158628, 0.04587594672587423, 0.06399314667046306], [0.010056903136156852, 0.1279082404392586, 0.04716912188415382, 0.059222347442541984, 0.05009989431481793, 0.028348885087968612, 0.05073786550528289], [0.04279007828368537, 0.09846747469849668, 0.026100181389938082, 0.037748994620703434, 0.0613030210494022, 0.010297421840668845, 0.02144373936778332]]}
  """)
  let _       = params["n"].intValue
  let nperseg = params["nperseg"].intValue
  let xs      = params["x"].arrayValue.map { $0.floatValue }
  let _S      = params["S"].arrayValue.map { $0.arrayValue.map { $0.floatValue } }

  let (_, _, S) = scipy.signal.spectrogram(
    xs,
    sample_rate: 22050,
    window:      "hann",
    nperseg:     nperseg,
    noverlap:    Int(0.5 * Double(nperseg)),
    scaling:     "spectrum",
    mode:        "magnitude"
  )

  // // Debug
  // print("param", ["n": n, "nperseg": nperseg])
  // sig("xs   ", xs)
  // mat("spect", S)
  // mat("S    ", Matrix(_S))
  // mat("Δ    ", S - Matrix(_S))
  // mat("log Δ", (S - Matrix(_S)).vect { log10($0) })

  testAlmostEqual("scipy.signal.spectrogram", S, Matrix(_S))

}

//
// scipy.signal.hann
//

testAlmostEqual("scipy.signal.hann", scipy.signal.hann(0),             [])
testAlmostEqual("scipy.signal.hann", scipy.signal.hann(0, sym: true),  [])
testAlmostEqual("scipy.signal.hann", scipy.signal.hann(0, sym: false), [])

testAlmostEqual("scipy.signal.hann", scipy.signal.hann(1),             [1])
testAlmostEqual("scipy.signal.hann", scipy.signal.hann(1, sym: true),  [1])
testAlmostEqual("scipy.signal.hann", scipy.signal.hann(1, sym: false), [1])

testAlmostEqual("scipy.signal.hann", scipy.signal.hann(2),             [0, 0])
testAlmostEqual("scipy.signal.hann", scipy.signal.hann(2, sym: true),  [0, 0])
testAlmostEqual("scipy.signal.hann", scipy.signal.hann(2, sym: false), [0, 1])

testAlmostEqual("scipy.signal.hann", scipy.signal.hann(3),             [0, 1,    0])
testAlmostEqual("scipy.signal.hann", scipy.signal.hann(3, sym: true),  [0, 1,    0])
testAlmostEqual("scipy.signal.hann", scipy.signal.hann(3, sym: false), [0, 0.75, 0.75])

testAlmostEqual("scipy.signal.hann", scipy.signal.hann(5),             [0,   0.5,       1,         0.5,       0])
testAlmostEqual("scipy.signal.hann", scipy.signal.hann(5, sym: true),  [0,   0.5,       1,         0.5,       0])
testAlmostEqual("scipy.signal.hann", scipy.signal.hann(5, sym: false), [0.0, 0.3454915, 0.9045085, 0.9045085, 0.3454915])
