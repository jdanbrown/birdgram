#!/bin/bash -eu
set -o pipefail
#
# Usage:
#   `basename $0` [options]
#
# Options:
#   --project X                  [default: bubo-1]                   The GCP project
#   --gce-image-family X         [default: bubo-cache]               The GCE image family to boot from and save to
#   --instance-prefix X          [default: \$gce_image_family]        Prefix to use in naming the temp GCE instance
#   --keep INSTANCE              [default: ]                         Keep the booted GCE instance
#   --reuse INSTANCE             [default: ]                         Reuse an existing GCE instance
#   --machine-type X             [default: n1-standard-4]            (Like gcloud-run)
#   --boot-disk-size X           [default: 50g]                      Minimal: you can't boot a disk smaller than its image
#   --boot-disk-type X           [default: pd-ssd]                   pd-ssd | pd-standard
#   --boot-image-family X        [default: \$gce_image_family]        The GCE image family to boot from
#   --build-dir X                [default: build]                    The remote dir to use for the docker build
#   --image-with-docker-build X  [default: docker:18.03.1]           Match OSX docker version, else --cache-from will miss
#   --image-with-gcr X           [default: google/cloud-sdk:203.0.0] An image with gcloud and docker, for GCR pull/push
#   --image X                    [default: bubo/features]            The docker image to build
#   --image-tag X                [default: latest]                   The docker image tag to build
#   --image-repo X               [default: gcr.io/\$project]          The docker repo to push to
#   --no-save-gce-image          [default: false]                    Skip saving a GCE image from the instance (~2m)

# Constants
bin="`dirname "$0"`"
bin="`"$bin"/normpath "$bin"`"
bubo_dir="`"$bin"/normpath "$bin/../.."`"
bubo_features_dir="`"$bin"/normpath "$bubo_dir/features"`"

# Parse args
docopts -h 'usage:' : x -h >/dev/null 2>/dev/null || { echo 'ERROR: docopts needs `pip install docopt==0.6.2`'; exit 1; }
usage="$(cat "$0" | sed -En '/^# Usage:/ { :loop; /^($|[^#])/q; s/^#($| )//p; n; b loop }' || true)"
eval "$(eval $'cat <<EOF\n'"$usage"$'\nEOF' | docopts -h - : "$@")"
# Re-eval to expand options containing $var's [TODO Don't break on values containing '/"]
eval "$(eval $'cat <<EOF\n'"$usage"$'\nEOF' | docopts -h - : "$@" | tr \' \")"

# Derived args
run_id="`date -u +%Y%m%dt%H%M%Sz`-`openssl rand -hex 4`"
if [[ "$keep" != '' ]]; then
  instance="$keep"
  instance_image="$instance-$run_id"
elif [[ "$reuse" != '' ]]; then
  instance="$reuse"
  instance_image="$instance-$run_id"
else
  instance="$instance_prefix-$run_id"
  instance_image="$instance"
fi
repo_image="${image_repo:+$image_repo/}$image"
repo_image_tag="$repo_image:$image_tag"

# Utils
show_cmd() { echo >&2; (set -x; "$@"); }
banner() { echo -e "\n#\n# $*\n#"; }

# Run these on any kind of exit (success or error)
atexit() {

  # Delete instance
  # - Async (&) so the user doesn't have to wait >10s, when in practice it seems pretty reliable...
  if [[ "$keep" == '' && "$reuse" == '' ]]; then
    banner "Deleting instance: $instance"
    show_cmd gcloud compute instances delete --quiet "$instance" >/dev/null 2>/dev/null &
  fi

  # Tell the user to be mindful of spend
  #   - TODO Automatically delete old images, to avoid accumulating cost
  #     - e.g. all but most recent N images in family (upper bound cost, lower bound num images for recovery)
  echo
  echo 'GCE instance images ($.085/gb/mo): https://console.cloud.google.com/compute/images'
  echo
  # (Goddammit python...)
  gcloud compute images list --no-standard-images --format=json | python -c "$(sed 's/^    //' <<< "
    import sys
    import pandas as pd
    print(
      pd.read_json(sys.stdin)
      .sort_values('creationTimestamp', ascending=False)
      [['diskSizeGb', 'creationTimestamp', 'name', 'family', 'status']]
      .to_string(index=False)
    )
  ")"
  echo
  echo "GCR container images ($.026/gb/mo): https://console.cloud.google.com/gcr/images/$project/GLOBAL/bubo/features"
  echo
  gsutil du -hs "gs://artifacts.$project.appspot.com"

  echo

}
trap atexit EXIT

# Create instance for docker build
if [[ "$reuse" == '' ]]; then
  banner "Creating instance: $instance"
  show_cmd time "$bin"/gcloud-run \
    --keep="$instance" \
    --machine-type="$machine_type" \
    --image-project="$project" \
    --image-family="$boot_image_family" \
    --image='' \
    --boot-disk-size="$boot_disk_size" \
    --boot-disk-type="$boot_disk_type" \
    --disk='' \
    --address='' \
    --vm-init='' \
    --no-container \
    true
fi

# Show disk space (pre-build), so we can keep an eye on the small-as-possible $boot_disk_size
banner 'Disk space (pre-build)'
show_cmd "$bin"/gcloud-run --reuse="$instance" --no-container 'df -h'

# rsync bubo/features/
# - Capture dev state for build, instead of requiring user to git commit/push
# - -FF to use .rsync-filter to exclude files
# - Mimic git otherwise
#   - --links: Don't follow symlinks
#   - --prume-empty-dirs: Don't copy empty dirs
banner 'rsync-ing dev code'
show_cmd time "$bin"/rsync-vm -azv --delete -FF --links --prune-empty-dirs \
  "$bubo_features_dir"/ "$instance":"$build_dir"/

# docker build, with all the gnarly supporting stuff to make it happen
# - `with_gcr` uses a container with gcloud to auth docker to our gcr registry (gcr.io/bubo-1)
# - `with_docker_build` uses a container with a more up-to-date version of docker (e.g. v18), else `--from-cache` won't
#   share cache hits across local dev (e.g. osx docker-v18) and remote build/deploy (e.g. cos docker-v17)
# - Misc. detailed notes for reference
#   - Caching: docker version matters! `docker build --cache-from` won't share cache hits across v17 and v18!
#     - v18 on docker for mac [https://docs.docker.com/docker-for-mac/release-notes/]
#     - v17 on gce cos        [https://cloud.google.com/container-optimized-os/docs/release-notes]
#     - v18 on gce coreos     [https://coreos.com/releases/]
#       - [But I can't figure out ssh (docs say user 'core')]
#     - So let's stick with cos
#       - To get v18 on cos, run image docker:18.03.1 with `docker build`
#       - To push/pull to gcr.io, run image google/cloud-sdk with `gcloud auth configure-docker` + `docker push/pull`
#   - To auth to dockerhub instead of gcr.io, you have to install secrets
#     - scp ~/hack/.bubo-secrets/docker/ $host:/secrets/.docker/
#     - ssh $host -- sudo docker --config=/secrets/.docker/ push ...
banner "Building docker image: $repo_image_tag"
show_cmd "$bin"/gcloud-run --reuse="$instance" --no-container '
  set -eux
  cd '"$build_dir"'
  vols=(
    -v/var/run/docker.sock:/var/run/docker.sock
    -v"$PWD:/'"$build_dir"'"
  )
  function _docker_run       { sudo docker run "${vols[@]}" -w"/'"$build_dir"'" -it "$@"; }
  function with_gcr          { _docker_run '"$image_with_gcr"' bash -c "gcloud auth configure-docker --quiet && $*"; }
  function with_docker_build { _docker_run '"$image_with_docker_build"' "$@"; }
  time with_gcr          docker pull '"$repo_image_tag"'
  time with_docker_build docker build . --cache-from='"$repo_image_tag"' -t '"$repo_image_tag"'
  time with_gcr          docker push '"$repo_image_tag"'
'

# Show disk space (post-build), so we can keep an eye on the small-as-possible $boot_disk_size
banner 'Disk space (post-build)'
show_cmd "$bin"/gcloud-run --reuse="$instance" --no-container 'df -h'

# Save the post-build fs as a gce image to speed up future builds
# - Saves the docker cache to speed up `docker pull` and `docker build`
# - Use gce image families so downstream consumers don't have to query for the full id that we just created
#   - https://cloud.google.com/compute/docs/images
#   - https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images
if [[ "$no_save_gce_image" == 'false' ]]; then
  banner "Building instance image: $instance_image (speeds up future builds)"
  show_cmd time gcloud compute instances stop "$instance"
  show_cmd time gcloud compute images create "$instance_image" --family="$gce_image_family" --source-disk="$instance"
  if [[ "$keep" != '' || "$reuse" != '' ]]; then
    show_cmd gcloud compute instances start "$instance" #--async
  fi
fi

# Whew, let the user know we made it to the end
banner 'Done'
